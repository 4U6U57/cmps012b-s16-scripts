#!/bin/bash
# sprint - Grading utility, faster than running

GRADEFILE="grade.txt"
PWD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CLASSDIR="$(echo $PWD | cut -d '/' -f 1-5)"
CLASS="$(basename $CLASSDIR)"
ASG="$(basename $PWD)"
ASGBIN="$CLASSDIR/bin/$ASG"
ASGDIR="$CLASSDIR/$ASG"
SEPARATE="=================================================="

# Read arguments
FUNC=""
FUNCDEFAULT="deduct compile export"
FUNCALL="$FUNCDEFAULT mail clean help"
if [[ $@ == "" ]]; then
	FUNC="$FUNCDEFAULT"
else
	for ARG in $@; do
		if echo "$FUNCALL" | grep -Pq "$ARG"; then
			FUNC+=$ARG
			FUNC+=" "
		else
			echo "ERROR: $ARG is not a valid sprint argument"
		fi
	done
fi

# Print welcome message
echo; echo; echo; echo; echo
echo $SEPARATE
echo "SPRINT - faster than running"
echo "CLASS  = $CLASS"
echo "ASG    = $ASG"
echo "MODE   = $FUNC"
echo $SEPARATE

# Declare all functions

verbose() {
	VERBOSE=true
}

forall() {
	CLASSNUM=$(echo $CLASS | cut -d '0' -f 2 | cut -d '-' -f 1)
	cd $ASGDIR
	for STUDENT in $(ls -d */); do
		STUDENTDIR=$ASGDIR/$STUDENT
		STUDENT=$(basename $STUDENT /)
		cd $STUDENTDIR
		#echo "$SEPARATE"
		#pwd
		$@
	done
}

score() {
	SCOREFILE=".score.f"
	case "$@" in
		init)
			echo "0" > $SCOREFILE
			;;
		get)
			cat $SCOREFILE
			;;
		[0-9]*)
			echo $(($(score get) + ($@))) > $SCOREFILE
			;;
		*)
			echo "score: Invalid score written $@"
			;;
	esac
}

deduct() {
	forall rm -f $GRADEFILE
	DSHBLANK="dsh.blank.sh"
	cd $ASGBIN
	echo "#!/bin/bash" > $DSHBLANK
	chmod +x $DSHBLANK
	for DSH in dsh.*.sh; do
		if [[ $DSH == dsh.*.$USER.sh || $DSH == dsh.*.all.sh ]]; then
			echo "EXECUTING $DSH"
			forall $ASGBIN/$DSH
		else
			echo "IGNORING $DSH"
		fi
	done
	cd $ASGBIN
	rm -f $DSHBLANK
}

compile() {
	DFILEPAT=".d.*.f"
	DFILEBLANK=".d.blank.f"
	INFOFILE="$ASGBIN/info.f"
	NOTESFILE=".notes.f"
	ASGSCORE=20
	forall touch $DFILEBLANK
	scoregen() {
		score init
		for DFILE in $DFILEPAT; do
			while read LINE; do
				score $(echo $LINE | cut -d "/" -f 1)
			done <$DFILE
		done
	}
	forall scoregen
	scorecap() {
		if [[ $(score get) -gt $ASGSCORE ]]; then
			SCORECAP=$(($ASGSCORE - $(score get)))
			score $SCORECAP
			echo "$SCORECAP / X | OVERRIDE: Score over defined maximum $ASGSCORE" > $DFILEBLANK
		elif [[ $(score get) -lt 0 ]]; then
			SCORECAP=$((-1 * $(score get)))
			score $SCORECAP
			echo "$SCORECAP / X | OVERRIDE: Score less than 0" > $DFILEBLANK
		fi
	}
	forall scorecap
	CLASSCOUNT=0
	SCORETOTAL=0
	makeavg(){
		CLASSCOUNT=$(($CLASSCOUNT + 1))
		SCORETOTAL=$(($SCORETOTAL + $(score get)))
	}
	forall makeavg
	CLASSAVG=$(($SCORETOTAL / $CLASSCOUNT))
	makeintro() {
		echo "CLASS:   $CLASS" > $GRADEFILE
		echo "ASG:     $ASG" >> $GRADEFILE
		echo "GRADERS: Isaak Joseph Cherdak <icherdak>" >> $GRADEFILE
		echo "         August Salay Valera <avalera>" >> $GRADEFILE
		echo "STUDENT: $(getent passwd $STUDENT | cut -d ":" -f 5) <$STUDENT>" >> $GRADEFILE
		echo "SCORE:   $(score get) / $ASGSCORE ($(($(score get) * 100 / $ASGSCORE))%)" >> $GRADEFILE
		echo "AVERAGE: $CLASSAVG / $ASGSCORE ($(($CLASSAVG * 100 / $ASGSCORE))%)" >> $GRADEFILE
	}
	forall makeintro
	makebreakdown() {
		echo >> $GRADEFILE
		echo "GRADE BREAKDOWN:" >> $GRADEFILE
		for DFILE in $DFILEPAT; do
			cat $DFILE >> $GRADEFILE
		done
	}
	forall makebreakdown
	forall rm -f $DFILEBLANK
}

export() {
	echo
}

mail() {
	echo
}

clean() {
	echo
}

help() {
	echo "SPRINT - faster than running"
	echo "USAGE: sprint [commands]"
	echo "Default (no commands): $FUNCDEFAULT"
	echo "All commands: $FUNCALL"
}

for ARG in $FUNC; do
	echo "MODE $ARG"
	$ARG
done
